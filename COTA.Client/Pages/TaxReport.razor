@page "/taxreport"
@using COTA.Core.Models
@inject HttpClient Http
@inject IJSRuntime JSRuntime

<h3>Tax Report</h3>

<div>
    <label>Wallet Addresses (one per line):</label>
    <textarea @bind="walletAddresses" rows="5" cols="50" class="form-control"></textarea>
</div>

<div style="margin-top: 10px;">
    <label>Start Date: </label>
    <InputDate @bind-Value="startDate" class="form-control" />
</div>

<div style="margin-top: 10px;">
    <label>End Date: </label>
    <InputDate @bind-Value="endDate" class="form-control" />
</div>

<div style="margin-top: 10px;">
    <button @onclick="CalculateTaxes" class="btn btn-primary">Get Tax Report</button>
</div>

@if (!string.IsNullOrEmpty(errorMessage))
{
    <div class="alert alert-danger mt-3" role="alert">
        @errorMessage
    </div>
}

@if (taxCalculations != null && taxCalculations.Any())
{
    <h4>Capital Gains</h4>
    <table class="table table-striped">
        <thead>
            <tr>
                <th>Asset</th>
                <th>Cost Basis</th>
                <th>Proceeds</th>
                <th>Gain/Loss</th>
                <th>Short-Term</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var calc in taxCalculations)
            {
                <tr>
                    <td>@calc.Asset</td>
                    <td>@calc.CostBasis.ToString("C")</td>
                    <td>@calc.Proceeds.ToString("C")</td>
                    <td>@calc.GainOrLoss.ToString("C")</td>
                    <td>@(calc.IsShortTerm ? "Yes" : "No")</td>
                </tr>
            }
        </tbody>
    </table>
    <button @onclick="DownloadCapitalGainsCsv" class="btn btn-success">Download Capital Gains CSV</button>
}

@if (stakingRewards != null && stakingRewards.Any())
{
    <h4>Staking Income</h4>
    <table class="table table-striped">
        <thead>
            <tr>
                <th>Amount</th>
                <th>Date</th>
                <th>USD Value</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var reward in stakingRewards)
            {
                <tr>
                    <td>@reward.Amount</td>
                    <td>@reward.Timestamp.ToShortDateString()</td>
                    <td>@reward.UsdValueAtTime.ToString("C")</td>
                </tr>
            }
        </tbody>
    </table>
    <button @onclick="DownloadStakingIncomeCsv" class="btn btn-success">Download Staking Income CSV</button>
}

@code {
    private string walletAddresses = "";
    private DateTime? startDate;
    private DateTime? endDate;
    private List<TaxCalculation>? taxCalculations;
    private List<StakingReward>? stakingRewards;
    private string errorMessage = "";

    private async Task CalculateTaxes()
    {
        try
        {
            // Validate date range
            if (startDate.HasValue && endDate.HasValue && startDate > endDate)
            {
                errorMessage = "Start Date cannot be after End Date.";
                return;
            }

            errorMessage = ""; // Clear any previous error messages

            var addresses = walletAddresses.Split(new[] { "\r\n", "\n" }, StringSplitOptions.RemoveEmptyEntries);
            if (!addresses.Any())
            {
                errorMessage = "Please provide at least one wallet address.";
                return;
            }

            // Create the request payload with addresses and date range
            var request = new TaxRequest
                {
                    Addresses = addresses,
                    StartDate = startDate,
                    EndDate = endDate
                };

            var response = await Http.PostAsJsonAsync("api/wallets/taxes", request);
            if (response.IsSuccessStatusCode)
            {
                var result = await response.Content.ReadFromJsonAsync<TaxResponse>();
                taxCalculations = result?.CapitalGains;
                stakingRewards = result?.StakingRewards;
            }
            else
            {
                var errorContent = await response.Content.ReadAsStringAsync();
                errorMessage = $"Error fetching tax report: {errorContent}";
                Console.WriteLine(errorMessage);
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Error: {ex.Message}";
            Console.WriteLine(errorMessage);
        }
    }

    private async Task DownloadCapitalGainsCsv()
    {
        try
        {
            var response = await Http.GetAsync("api/wallets/report/capital-gains");
            if (response.IsSuccessStatusCode)
            {
                var stream = await response.Content.ReadAsStreamAsync();
                using var streamRef = new DotNetStreamReference(stream);
                await JSRuntime.InvokeVoidAsync("downloadFileFromStream", "capital_gains.csv", streamRef);
            }
            else
            {
                errorMessage = $"Error downloading capital gains CSV: {await response.Content.ReadAsStringAsync()}";
                Console.WriteLine(errorMessage);
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Error downloading capital gains CSV: {ex.Message}";
            Console.WriteLine(errorMessage);
        }
    }

    private async Task DownloadStakingIncomeCsv()
    {
        try
        {
            var response = await Http.GetAsync("api/wallets/report/staking-income");
            if (response.IsSuccessStatusCode)
            {
                var stream = await response.Content.ReadAsStreamAsync();
                using var streamRef = new DotNetStreamReference(stream);
                await JSRuntime.InvokeVoidAsync("downloadFileFromStream", "staking_income.csv", streamRef);
            }
            else
            {
                errorMessage = $"Error downloading staking income CSV: {await response.Content.ReadAsStringAsync()}";
                Console.WriteLine(errorMessage);
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Error downloading staking income CSV: {ex.Message}";
            Console.WriteLine(errorMessage);
        }
    }

    private class TaxRequest
    {
        public string[] Addresses { get; set; }
        public DateTime? StartDate { get; set; }
        public DateTime? EndDate { get; set; }
    }

    private class TaxResponse
    {
        public List<TaxCalculation>? CapitalGains { get; set; }
        public List<StakingReward>? StakingRewards { get; set; }
    }
}